  // index.js ‚Äî Shumir Bot (Fun & Utility Only, Ti·∫øng Vi·ªát)
  require("dotenv").config();
  const fs = require("fs");
  const path = require("path");
  const { Client, Collection, GatewayIntentBits, EmbedBuilder } = require("discord.js");

  const client = new Client({
    intents: [
      GatewayIntentBits.Guilds,
      GatewayIntentBits.GuildMessages,
      GatewayIntentBits.MessageContent,
    ],
  });

  client.commands = new Collection();

  // üß≠ Load to√†n b·ªô slash command t·ª´ /commands
  const foldersPath = path.join(__dirname, "commands");
  const commandFolders = fs.readdirSync(foldersPath);

  for (const folder of commandFolders) {
    const commandsPath = path.join(foldersPath, folder);
    const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith(".js"));
    for (const file of commandFiles) {
      const filePath = path.join(commandsPath, file);
      const command = require(filePath);
      if ("data" in command && "execute" in command) {
        client.commands.set(command.data.name, command);
      } else {
        console.log(`[‚ö†Ô∏è] L·ªánh ${file} b·ªã thi·∫øu "data" ho·∫∑c "execute"!`);
      }
    }
  }

  client.once("ready", () => {
    console.log(`‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: ${client.user.tag}`);
    client.user.setPresence({
      activities: [{ name: "üéâ Gi·∫£i tr√≠ c√πng b·∫°n!", type: 0 }],
      status: "online",
    });
  });

  client.on("interactionCreate", async interaction => {
    if (!interaction.isChatInputCommand()) return;
    const command = interaction.client.commands.get(interaction.commandName);
    if (!command) return;

    try {
      await command.execute(interaction);
    } catch (error) {
      console.error(error);
      const embed = new EmbedBuilder()
        .setColor("Red")
        .setTitle("‚ùå L·ªói khi ch·∫°y l·ªánh!")
        .setDescription("C√≥ v·∫ª Shumir h∆°i b·ªëi r·ªëi... b·∫°n th·ª≠ l·∫°i nh√©!");
      await interaction.reply({ embeds: [embed], ephemeral: true });
    }
  });
// üìÇ Load Commands (t·ª± ƒë·ªông g√°n category cho /help)
const commandsPath = path.join(__dirname, "commands");
client.commands = new Collection();

for (const folder of fs.readdirSync(commandsPath)) {
  const folderPath = path.join(commandsPath, folder);
  const commandFiles = fs.readdirSync(folderPath).filter(f => f.endsWith(".js"));

  for (const file of commandFiles) {
    const filePath = path.join(folderPath, file);
    const command = require(filePath);
    if ("data" in command && "execute" in command) {
      command.category = folder; // üè∑Ô∏è G√°n nh√≥m t·ª± ƒë·ªông
      client.commands.set(command.data.name, command);
    } else {
      console.warn(`[‚ö†Ô∏è] L·ªánh ${file} b·ªã thi·∫øu "data" ho·∫∑c "execute"`);
    }
  }
}

  client.login(process.env.TOKEN);
